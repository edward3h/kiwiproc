/* (C) Edward Harman 2025 */
package org.ethelred.kiwiproc.gradle;

import io.avaje.jsonb.JsonType;
import io.avaje.jsonb.Jsonb;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.sql.SQLException;
import java.util.Properties;
import java.util.stream.Collectors;
import javax.sql.DataSource;
import liquibase.Liquibase;
import liquibase.database.jvm.JdbcConnection;
import liquibase.exception.LiquibaseException;
import liquibase.resource.DirectoryResourceAccessor;
import org.ethelred.kiwiproc.processorconfig.DataSourceConfig;
import org.ethelred.kiwiproc.processorconfig.DependencyInjectionStyle;
import org.ethelred.kiwiproc.processorconfig.ProcessorConfig;
import org.gradle.api.DefaultTask;
import org.gradle.api.NamedDomainObjectContainer;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.services.ServiceReference;
import org.gradle.api.tasks.*;
import org.jspecify.annotations.Nullable;
import org.postgresql.ds.PGSimpleDataSource;

@UntrackedTask(
        because =
                "A new Postgres instance is started for each Gradle run, and the database port and name are chosen at random.")
public abstract class KiwiProcConfigTask extends DefaultTask {
    @ServiceReference(EmbeddedPostgresService.DEFAULT_NAME)
    abstract Property<EmbeddedPostgresService> getService();

    @OutputFile
    public abstract RegularFileProperty getConfigFile();

    @OutputFile
    public abstract RegularFileProperty getApplicationPropertiesFile();

    @Input
    public abstract NamedDomainObjectContainer<KiwiProcDataSource> getDataSources();

    @Input
    public abstract Property<DependencyInjectionStyle> getDependencyInjectionStyle();

    @Input
    public abstract Property<Boolean> getDebug();

    private @Nullable KiwiProcExtension extension;

    public KiwiProcConfigTask() {
        getDebug().convention(false);
    }

    @TaskAction
    public void run() {
        // prefer datasources configured on this task
        var nodc = getDataSources();
        if (nodc.isEmpty() && extension != null && !extension.getDataSources().isEmpty()) {
            // if empty, prefer datasources configured on the extension
            nodc = extension.getDataSources();
        } else if (nodc.isEmpty()
                && extension != null
                && extension.getLiquibaseChangelog().isPresent()) {
            // if still empty, make a default
            nodc.create("default", x -> x.getLiquibaseChangelog().convention(extension.getLiquibaseChangelog()));
        } else {
            throw new IllegalStateException("No datasource configured.");
        }
        var dataSources =
                nodc.stream().map(this::toDataSourceConfig).collect(Collectors.toMap(DataSourceConfig::named, x -> x));
        var processorConfig = new ProcessorConfig(
                dataSources, getDependencyInjectionStyle().get(), getDebug().get());
        var outputPath = getConfigFile().get().getAsFile().toPath();
        Jsonb jsonb = Jsonb.builder().build();
        JsonType<ProcessorConfig> processorConfigJsonType = jsonb.type(ProcessorConfig.class);
        try (var writer = Files.newBufferedWriter(outputPath)) {
            processorConfigJsonType.toJson(processorConfig, writer);
            getLogger().info("Wrote {}", outputPath);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }

        if (getApplicationPropertiesFile().isPresent()) {
            outputPath = getApplicationPropertiesFile().get().getAsFile().toPath();
            try (var writer = Files.newBufferedWriter(outputPath)) {
                var properties = new Properties();
                toProperties(properties, processorConfig);
                properties.store(writer, "Generated by KiwiProcConfigTask");
                getLogger().info("Wrote {}", outputPath);
            } catch (IOException e) {
                throw new UncheckedIOException(e);
            }
        }
    }

    private void toProperties(Properties properties, ProcessorConfig processorConfig) {
        processorConfig
                .dataSources()
                .values()
                .forEach(dataSourceConfig -> properties.setProperty(
                        "datasources.%s.url".formatted(dataSourceConfig.named()), dataSourceConfig.url()));
    }

    private boolean isExternal(KiwiProcDataSource dataSource) {
        return dataSource.getJdbcUrl().isPresent();
    }

    private DataSourceConfig toDataSourceConfig(KiwiProcDataSource kiwiProcDataSource) {
        if (isExternal(kiwiProcDataSource)) {
            return externalDataSourceConfig(kiwiProcDataSource);
        }
        var liquibaseFile = kiwiProcDataSource.getLiquibaseChangelog().get().getAsFile();
        var connectionInfo = getService().get().getPreparedDatabase(liquibaseFile);
        return new DataSourceConfig(
                kiwiProcDataSource.getName(),
                "jdbc:postgresql://localhost:%d/%s?user=%s"
                        .formatted(connectionInfo.getPort(), connectionInfo.getDbName(), connectionInfo.getUser()),
                connectionInfo.getDbName(),
                connectionInfo.getUser(),
                null,
                null);
    }

    private DataSourceConfig externalDataSourceConfig(KiwiProcDataSource kiwiProcDataSource) {
        if (kiwiProcDataSource.getLiquibaseChangelog().isPresent()) {
            var pgSimpleDataSource = new PGSimpleDataSource();
            pgSimpleDataSource.setDatabaseName(kiwiProcDataSource.getDatabase().get());
            pgSimpleDataSource.setURL(kiwiProcDataSource.getJdbcUrl().get());
            pgSimpleDataSource.setUser(kiwiProcDataSource.getUsername().get());
            if (kiwiProcDataSource.getPassword().isPresent()) {
                pgSimpleDataSource.setPassword(kiwiProcDataSource.getPassword().get());
            }
            liquibaseUpdate(
                    kiwiProcDataSource.getLiquibaseChangelog().getAsFile().get(), pgSimpleDataSource);
        }

        return new DataSourceConfig(
                kiwiProcDataSource.getName(),
                kiwiProcDataSource.getJdbcUrl().get(),
                kiwiProcDataSource.getDatabase().get(),
                kiwiProcDataSource.getUsername().get(),
                kiwiProcDataSource.getPassword().getOrNull(),
                null);
    }

    private void liquibaseUpdate(File file, DataSource dataSource) {
        try (var connection = dataSource.getConnection()) {
            var liquibaseConnection = new JdbcConnection(connection);
            var liquibase = new Liquibase(
                    file.getName(), new DirectoryResourceAccessor(file.getParentFile()), liquibaseConnection);
            liquibase.update();
        } catch (SQLException | FileNotFoundException | LiquibaseException e) {
            throw new RuntimeException(e);
        }
    }

    void setExtension(@Nullable KiwiProcExtension extension) {
        this.extension = extension;
    }
}
